# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/brickyard314/PycharmProjects/derby_runner/resources/gui_v2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pandas as pd
import geopandas as gpd
import matplotlib

matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from datetime import datetime
from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QFileDialog, QDialog
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QComboBox, QLabel
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QWidget
import sys


# ##############################################################################
# CLASS TableModel - handles interaction of pandas dataframes with PyQt window
#
# ##############################################################################

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsEditable

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                value = self._data.iloc[index.row(), index.column()]
                if isinstance(value, datetime):
                    return value.strftime("%Y-%m-%d")
                elif isinstance(value, float):
                    return "%.2f" % value
                else:
                    return '%s' % value
            elif role == Qt.TextAlignmentRole:
                value = self._data.iloc[index.row(), index.column()]
                if isinstance(value, float) or isinstance(value, int):
                    return Qt.AlignVCenter + Qt.AlignRight
                else:
                    return Qt.AlignVCenter + Qt.AlignHCenter
            else:
                return QtCore.QVariant()

    def setData(self, index, value, role=Qt.DisplayRole, **kwargs):
        if role == Qt.EditRole:
            self._data.iloc[index.row(), index.column()] = value
            return True
        return False

    def rowCount(self, index=QtCore.QModelIndex()) -> int:
        return self._data.shape[0]

    def columnCount(self, index=QtCore.QModelIndex()) -> int:
        return self._data.shape[1]

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        # section is the index of the column/row.
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return str(self._data.columns[section])
            if orientation == Qt.Vertical:
                return str(self._data.index[section])


def help_about():
    about_msg = QMessageBox()
    about_msg.setWindowTitle("About Derby Runner")
    about_msg.setText("Derby Runner v0.1")
    about_msg.setInformativeText("Copyright Â©2022")
    about_msg.setIcon(QMessageBox.Information)
    about_msg.setDetailedText("More to come...")
    about_msg.exec_()


def init_stations(data):
    # stations_columns = ['StationID', 'Name', 'Description', 'TroopID', 'PrimaryAdultID', 'SecondaryAdultID',
    # 'Longitude', 'Latitude']
    x: float = 0.00

    for idx, row in data.iterrows():
        row['StationID'] = 'S' + str(idx).zfill(3)
        row['Name'] = 'Enter Name'
        row['Description'] = 'Enter Description'
        row['TroopID'] = ' '
        row['PrimaryAdultID'] = ' '
        row['SecondaryAdultID'] = ' '
        row['Longitude'] = x
        row['Latitude'] = x
    return


def init_waypoints(data):
    #  waypoints_columns = ['WaypointID', 'Name', 'Description', 'Longitude', 'Latitude']
    x: float = 0.00

    for idx, row in data.iterrows():
        row['WaypointID'] = 'W' + str(idx).zfill(3)
        row['Name'] = 'Enter Name'
        row['Description'] = 'Enter Description'
        row['Longitude'] = x
        row['Latitude'] = x
    return

class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()

        # a figure instance to plot on
        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)

        self.webEngineView = QWebEngineView()

        self.model = TableModel(QtCore.QAbstractTableModel)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)

        self.tableView = QtWidgets.QTableView(self.horizontalLayoutWidget)
        self.tableView.setObjectName("tableView")

        self.df_stations = pd.DataFrame()
        self.df_waypoints = pd.DataFrame()
        self.df_courses = pd.DataFrame()
        self.df_schedules = pd.DataFrame()
        self.df_coursepoints = pd.DataFrame()
        self.df_itineraries = pd.DataFrame()
        self.df_units = pd.DataFrame()
        self.df_squads = pd.DataFrame()
        self.df_youths = pd.DataFrame()
        self.df_adults = pd.DataFrame()

    def setupUi(self, MainWindow):
        self.new_event()

        MainWindow.setObjectName("MainWindow")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("central_widget")
        MainWindow.setWindowTitle('Derby Runner')
        i_left = 600
        i_top = 900
        i_width = 2250
        i_height = 1150
        MainWindow.setGeometry(i_left, i_top, i_width, i_height)
        ssh_file = "/home/brickyard314/PycharmProjects/derby_runner/derby_runner/style_blue.css"
        with open(ssh_file, "r") as fh:
            MainWindow.setStyleSheet(fh.read())

        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(-1, 9, 2200, 1100))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")

        #self.horizontalLayout.addWidget(self.canvas)

        self.view_stations()
        self.tableView.setModel(self.model)
        self.tableView.setObjectName("tableView")
        self.verticalLayout.addWidget(self.tableView)

        self.calendarWidget = QtWidgets.QCalendarWidget(self.horizontalLayoutWidget)
        self.calendarWidget.setObjectName("calendarWidget")
        self.verticalLayout.addWidget(self.calendarWidget)

        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.horizontalLayout.addLayout(self.verticalLayout)

        with open('/home/brickyard314/NC_maps/nc_test.html', 'r') as f:
            html = f.read()
            self.webEngineView.setHtml(html)
        self.horizontalLayout.addWidget(self.webEngineView)


        MainWindow.setCentralWidget(self.centralwidget)

        menubar = QtWidgets.QMenuBar(MainWindow)
        menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        menubar.setObjectName("menubar")
        MainWindow.setMenuBar(menubar)
        file_menu = menubar.addMenu('&File')
        open_act = file_menu.addAction('&Open')
        open_act.setShortcut('Ctrl+O')
        open_act.setStatusTip('Open an Event')
        open_act.triggered.connect(self.openfilenamedialog)
        file_menu.addAction(open_act)

        save_act = file_menu.addAction('&Save')
        save_act.setShortcut('Ctrl+S')
        save_act.setStatusTip('Save Current Event')
        save_act.triggered.connect(self.savefiledialog)
        file_menu.addAction(save_act)

        settings_act = file_menu.addAction('Settings')
        settings_act.setStatusTip('Edit how Derby Runner looks and works')
        settings_act.triggered.connect(self.settingsdialog)
        file_menu.addAction(settings_act)

        edit_menu = menubar.addMenu('&Edit')

        view_menu = menubar.addMenu('&View')
        waypoints_act = view_menu.addAction('&Waypoints')
        waypoints_act.setShortcut('Ctrl+W')
        waypoints_act.setStatusTip('Switch to Waypoints Table')
        view_menu.addAction(waypoints_act)
        waypoints_act.triggered.connect(self.view_waypoints)

        stations_act = view_menu.addAction('&Stations')
        stations_act.setShortcut('Ctrl+S')
        stations_act.setStatusTip('Switch to Stations Table')
        view_menu.addAction(stations_act)
        stations_act.triggered.connect(self.view_stations)

        courses_act = view_menu.addAction('&Courses')
        courses_act.setShortcut('Ctrl+C')
        courses_act.setStatusTip('Switch to Courses Table')
        view_menu.addAction(courses_act)
        courses_act.triggered.connect(self.view_courses)

        coursepoints_act = view_menu.addAction('Course &Points')
        coursepoints_act.setShortcut('Ctrl+P')
        coursepoints_act.setStatusTip('Switch to Coursepoints Table')
        view_menu.addAction(coursepoints_act)
        coursepoints_act.triggered.connect(self.view_coursepoints)

        units_act = view_menu.addAction('&Units')
        units_act.setShortcut('Ctrl+U')
        units_act.setStatusTip('Switch to Units Table')
        view_menu.addAction(units_act)
        units_act.triggered.connect(self.view_units)

        squads_act = view_menu.addAction('S&quads')
        squads_act.setShortcut('Ctrl+Q')
        squads_act.setStatusTip('Switch to Squads Table')
        view_menu.addAction(squads_act)
        squads_act.triggered.connect(self.view_squads)

        itinerary_menu = menubar.addMenu('&Itinerary')
        maps_menu = menubar.addMenu('&Maps')
        help_menu = menubar.addMenu('&Help')

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.showMessage('Ready')
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))

    def settingsdialog(self):
        dlg = QDialog()
        self.comboBox = QComboBox()
        self.layout = QtWidgets.QVBoxLayout()

        self.layout.addWidget(self.comboBox)
        self.comboBox.addItem("Navy")
        self.comboBox.addItem("Gray")
        self.comboBox.addItem("Blue")
        x = self.comboBox.currentText()
        if x == 'Gray':
            ssh_file = "/home/brickyard314/PycharmProjects/derby_runner/derby_runner/style_gray.css"
            with open(ssh_file, "r") as fh:
                MainWindow.setStyleSheet(fh.read())
        elif x == 'Blue':
            print('blue is the sky')
        else:
            print('it is just dark')

        dlg.setGeometry(1000, 1000, 500, 500)
        dlg.setLayout(self.layout)
        dlg.exec()



    def savefiledialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        x = QFileDialog()
        file_name, _ = x.getSaveFileName(caption="Caption", filter="H5F Files (*.h5);;All Files (*)", options=options)
        file_name = file_name + ".h5"
        if file_name:
            self.df_stations.to_hdf(file_name, key='stations', mode='w')
            self.df_waypoints.to_hdf(file_name, key='waypoints', mode='a')
            self.df_courses.to_hdf(file_name, key='courses', mode='a')
            self.df_coursepoints.to_hdf(file_name, key='coursepoints', mode='a')
            self.df_units.to_hdf(file_name, key='units', mode='a')
            self.df_squads.to_hdf(file_name, key='squads', mode='a')
            self.df_itineraries.to_hdf(file_name,key='itineraries', mode='a')
            self.df_schedules.to_hdf(file_name, key='schedules', mode='a')
            self.df_youths.to_hdf(file_name, key='youths', mode='a')
            self.df_adults.to_hdf(file_name, key='adults', mode='a')

    def openfilenamedialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        x = QFileDialog()
        file_name, _ = x.getOpenFileName(caption="Caption", filter="H5F Files (*.h5);;All Files (*)",
                                         options=options)
        if file_name:
            self.df_stations = pd.read_hdf(file_name, key='stations', mode='r')
            self.df_waypoints = pd.read_hdf(file_name, key='waypoints', mode='r')
            self.df_courses = pd.read_hdf(file_name, key='courses', mode='r')
            self.df_coursepoints = pd.read_hdf(file_name, key='coursepoints', mode='r')
            self.df_schedules = pd.read_hdf(file_name, key='schedules', mode='r')
            self.df_itineraries = pd.read_hdf(file_name, key='itineraries', mode='r')
            self.df_units = pd.read_hdf(file_name, key='units', mode='r')
            self.df_squads = pd.read_hdf(file_name, key='squads', mode='r')
            self.df_youths = pd.read_hdf(file_name, key='youths', mode='r')

            self.view_waypoints()

    def new_event(self):
        stations_columns = ['StationID', 'Name', 'Description', 'TroopID', 'PrimaryAdultID', 'SecondaryAdultID',
                            'Longitude', 'Latitude']
        self.df_stations = pd.DataFrame(columns=stations_columns, index=[0, 1, 2, 3, 4, 5])
        init_stations(self.df_stations)

        waypoints_columns = ['WaypointID', 'Name', 'Description', 'Longitude', 'Latitude']
        self.df_waypoints = pd.DataFrame(columns=waypoints_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_waypoints.fillna('Empty', inplace=True)

        courses_columns = ['CourseID', 'cName', 'cDescription', 'FirstStopType', 'FirstStopID']
        self.df_courses = pd.DataFrame(columns=courses_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_courses.fillna('Empty', inplace=True)

        coursepoint_columns = ['CoursepointID', 'CourseID', 'StopType', 'StopID', 'NextStopType', 'NextStopID']
        self.df_coursepoints = pd.DataFrame(columns=coursepoint_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_coursepoints.fillna('Empty', inplace=True)

        units_columns = ['UnitID', 'UnitType', 'UnitNumber', 'Leader1ID', 'Leader2ID', 'Leader3ID', 'ParticipateFlag',
                         'HostFlag', 'StationID']
        self.df_units = pd.DataFrame(columns=units_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_units.fillna('Empty', inplace=True)

        squad_columns = ['SquadID', 'SquadType', 'SquadName', 'UnitID', 'SquadLeaderID', 'ItineraryID']
        self.df_squads = pd.DataFrame(columns=squad_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_squads.fillna('Empty', inplace=True)

        adults_columns = ['AdultID', 'First Name', 'Last Name', 'Email', 'Primary Phone', 'UnitID']
        self.df_adults = pd.DataFrame(columns=adults_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_adults.fillna('Empty', inplace=True)

        youths_columns = ['YouthID', 'First Name', 'Last Name', 'Email', 'Primary Phone', 'UnitID']
        self.df_youths = pd.DataFrame(columns=youths_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_youths.fillna('Empty', inplace=True)

        schedules_columns = ['ScheduleID', 'Start', 'End', 'Note']
        self.df_schedules = pd.DataFrame(columns=schedules_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_schedules.fillna('Empty', inplace=True)

        itinerary_columns = ['ItineraryID', 'Start\nStation']
        self.df_itineraries = pd.DataFrame(columns=itinerary_columns, index=[0, 1, 2, 3, 4, 5])
        self.df_itineraries.fillna('Empty', inplace=True)

    def view_stations(self):
        self.model = TableModel(self.df_stations)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def view_waypoints(self):
        self.model = TableModel(self.df_waypoints)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def view_courses(self):
        self.model = TableModel(self.df_courses)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def view_coursepoints(self):
        self.model = TableModel(self.df_coursepoints)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def view_units(self):
        self.model = TableModel(self.df_units)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def view_squads(self):
        self.model = TableModel(self.df_squads)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def view_adults(self):
        self.model = TableModel(self.df_adults)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def view_youths(self):
        self.model = TableModel(self.df_youths)
        self.tableView.setModel(self.model)
        self.tableView.resizeColumnsToContents()
        return

    def select_unittype(self):
        combo_box = QComboBox()
        combo_box.addItem("Troop")
        combo_box.addItem("Crew")
        combo_box.addItem("Post")
        combo_box.addItem("Ship")
        combo_box.addItem("Pack")
        combo_box.move(50, 250)
        self.styleChoice.move(50, 150)
        combo_box.activated[str].connect(self.style_choice)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
